<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | TECH.KAZEOR.NET]]></title>
  <link href="http://tech.kazeor.net/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://tech.kazeor.net/"/>
  <updated>2013-02-10T22:27:43+09:00</updated>
  <id>http://tech.kazeor.net/</id>
  <author>
    <name><![CDATA[Takeshi YAEDA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to organize repositories cloned from GitHub]]></title>
    <link href="http://tech.kazeor.net/blog/2013/02/10/how-to-organize-repositories-cloned-from-github/"/>
    <updated>2013-02-10T22:01:00+09:00</updated>
    <id>http://tech.kazeor.net/blog/2013/02/10/how-to-organize-repositories-cloned-from-github</id>
    <content type="html"><![CDATA[<p>GitHubで見つけたレポジトリはいつも<code>~/dev/github</code>にcloneしているのですが，最近雑然として扱いにくっくなっていました．</p>

<p>ユーザー毎に<code>~/dev/github/&lt;username&gt;/&lt;repo&gt;</code>と分けてみたり，よくアクセスするものは<code>~/dev/github/&lt;repo&gt;</code>と直下に置いてみたりしていて，かなり見づらくなっていました．特にユーザー名とレポジトリ名がごっちゃで見づらい．</p>

<p>そんなことに悩んでいるときに，丁度良いツールを見つけました．</p>

<p><a href="http://subtech.g.hatena.ne.jp/motemen/20130207/1360210479">GitHub のリポジトリを管理する小さいツール ghq - NaN days - subtech</a></p>

<p>基本はユーザー毎に<code>~/dev/github/@&lt;username&gt;/&lt;repo&gt;</code>にcloneして，直下にはシンボリックリンクを作成．ユーザ名に@が付いているので見やすい．これはいい！</p>

<p><em>以下蛇足</em></p>

<p>どうせなら<a href="https://github.com/defunkt/hub">hubコマンド</a>みたいに</p>

<p><code>sh
ghq [-clone] yaeda/ghq
</code></p>

<p>という感じでcloneできれば楽だなと思い，試しに実装してみたのですが</p>

<p><code>sh
ghq [-cd] @yaeda/ghq
</code></p>

<p>と混乱しそうで微妙です．やめたほうがいいかも．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improved GitLab Public mode]]></title>
    <link href="http://tech.kazeor.net/blog/2013/01/25/improved-gitlab-public-mode/"/>
    <updated>2013-01-25T00:51:00+09:00</updated>
    <id>http://tech.kazeor.net/blog/2013/01/25/improved-gitlab-public-mode</id>
    <content type="html"><![CDATA[<p>先日GitLabの4.1がReleaseされ，ついにPublic Modeが導入されました．LDAPや同じく4.1から追加されたSign-up Pageを合わせて使えば，GitHubっぽいものをInternalに作れるようになりました．</p>

<p>と思って4.1にアップグレードしたのですが，Public Modeと言っても，レポジトリのタイトルとclone用のurlがリスト表示されるだけでした．ソースコードやコミットログを見ることはできません．</p>

<p>そこで，最近Railsを勉強し始めたので，腕試しに以下の機能拡張をしてみました．</p>

<ul>
<li>dashboardに"Public"というナビゲーションタブを追加</li>
<li>PublicなレポジトリにはReporter相当の権限で誰でもアクセス可能</li>
</ul>


<p>こんな感じでタブが追加されます．</p>

<p><a href="http://www.flickr.com/photos/22927952@N03/8410694643/" title="Screen Shot 2013-01-25 at 1.04.45 by yaeda, on Flickr"><img src="http://farm9.staticflickr.com/8192/8410694643_57780f3b07_z.jpg" width="511" height="277" alt="Screen Shot 2013-01-25 at 1.04.45"></a></p>

<p>ソースコードは以下にあります．</p>

<p><a href="https://github.com/yaeda/gitlabhq/tree/improve-public-mode">yaeda/gitlabhq at improve-public-mode · GitHub</a></p>

<p>GitLabのコードは規模が大きいですが，かなり読みやすいです．綺麗なコードだったので，修正も少なくすみました．なかなか参考になります．</p>

<p>自分で手を入れ始めると可愛くなりますね．LET'S HAPPY GITLAB LIFE!</p>

<p><a href="http://blog.gitlab.org/gitlab-4-1-released/%20GitLab%204.1%20-%20GITLAB%20Blog">GitLab 4.1 - GITLAB Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Protocol Access over Http Proxy]]></title>
    <link href="http://tech.kazeor.net/blog/2012/12/22/git-protocol-access-over-http-proxy/"/>
    <updated>2012-12-22T15:43:00+09:00</updated>
    <id>http://tech.kazeor.net/blog/2012/12/22/git-protocol-access-over-http-proxy</id>
    <content type="html"><![CDATA[<p>Git protocol(git://) is the fastest way to access to a git repository. However, firewall sometime prevent this protocol.</p>

<p>Recently we can use ssh protocol instead of git protocol to the Github repositories. However many other git repositories don't have such alternatives.</p>

<p>In that case, 'corkscrew' enable you to use git protocol over http proxy.</p>

<p>Install corkscrew.
<code>sh
sudo apt-get install corkscrew
</code></p>

<p>Create a script called 'git-proxy.sh'.
```sh</p>

<h1>!/bin/sh</h1>

<p>corkscrew <proxy host> <proxy port> $1 $2
```</p>

<p>Setup environment variable called GIT_PROXY_COMMAND.
<code>sh
chmod 755 /path/to/git-proxy.sh
export GIT_PROXY_COMMAND=/path/to/git-proxy.sh
</code></p>

<p>Another approach is using 'socat'. I havn't yet tried that so refer to the following links, please.</p>

<ul>
<li><a href="http://sitaramc.github.com/tips/git-over-proxy.html">How to use git over an HTTP proxy, with socat</a></li>
<li><a href="http://www.emilsit.net/blog/archives/how-to-use-the-git-protocol-through-a-http-connect-proxy/">How to use the git protocol through a HTTP CONNECT proxy - Thoughts on Systems</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
